name: Build and Push Docker Image

on:
  push:
    branches: [ "feature" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

  # static_analysis:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '11'
  #         distribution: 'temurin'
  #         cache: maven
  #     - name: Build with Maven
  #       run: mvn -B package --file pom.xml
  #     - name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@v2
  #       with:
  #         projectBaseDir: ./
  #         args: >
  #           -Dsonar.organization=ajayingale12345
  #           -Dsonar.projectKey=ajayingale12345_examportal-cicd
  #           -Dsonar.sources=src/main
  #           -Dsonar.java.binaries=target
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # snyk-scan:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Snyk
  #       run: npm install -g snyk
  #     - name: Authenticate Snyk
  #       run: snyk auth ${{ secrets.SNYK_TOKEN }}
  #     - name: Test and Monitor Dependencies
  #       run: snyk test --file=pom.xml
  #       continue-on-error: true
  #     - name: Generate Snyk Report
  #       run: snyk test --file=pom.xml --json > snyk-report.json || true
  #     - name: Install snyk-to-html
  #       run: npm install -g snyk-to-html
  #     - name: Convert Snyk Report to HTML
  #       run: snyk-to-html -i snyk-report.json -o snyk-report.html
  #     - name: Upload Snyk HTML Report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: snyk-report
  #         path: snyk-report.html

  # secret-scan:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run Gitleaks to scan for secrets
  #       uses: zricethezav/gitleaks-action@v1.3.0
  #       with:
  #         args: "--path=./ExamBackend_CICD/src"
  #     - name: Upload Gitleaks report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: gitleaks-report
  #         path: gitleaks-report.json

  packaging:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_GITHUB_TOKEN }}
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag ghcr.io/${{ github.repository_owner }}/examportal:${{ github.sha }}
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/download/v0.40.0/trivy_0.40.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.40.0_Linux-64bit.deb
      - name: Run Trivy scan on Docker image
        run: trivy image --no-progress --format json --output trivy-report.json ghcr.io/${{ github.repository_owner }}/examportal:${{ github.sha }}
      - name: Upload Trivy scan report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-report
          path: trivy-report.json
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm install json2html
    
      - name: Create and Append Data to a File
        run: |
          cat <<EOT >> convert_trivy_report.js
          const fs = require('fs');

          // Read the JSON file
          const jsonData = JSON.parse(fs.readFileSync('trivy-report.json', 'utf8'));

          // Create HTML content
          let htmlContent = \`
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Vulnerabilities Report</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 20px;
              }
              table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
              }
              table, th, td {
                border: 1px solid #ddd;
              }
              th, td {
                padding: 8px;
                text-align: left;
              }
              th {
                background-color: #f4f4f4;
              }
              .section-title {
                margin-top: 20px;
                font-size: 1.2em;
                font-weight: bold;
              }
              .description {
                margin-top: 10px;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
              }
              .references a {
                display: block;
                margin: 5px 0;
                color: #0066cc;
              }
            </style>
          </head>
          <body>
            <h1>Vulnerabilities Report</h1>
          \`;

          jsonData.Vulnerabilities.forEach(vuln => {
            htmlContent += \`
            <div class="vulnerability">
              <div class="section-title">\${vuln.Title}</div>
              <div class="description">
                <p><strong>Description:</strong> \${vuln.Description}</p>
                <p><strong>Severity:</strong> \${vuln.Severity}</p>
                <p><strong>CVSS V2 Score:</strong> \${vuln.CVSS.nvd.V2Score}</p>
                <p><strong>CVSS V3 Score:</strong> \${vuln.CVSS.nvd.V3Score}</p>
                <p><strong>Published Date:</strong> \${new Date(vuln.PublishedDate).toLocaleDateString()}</p>
                <p><strong>Last Modified Date:</strong> \${new Date(vuln.LastModifiedDate).toLocaleDateString()}</p>
                <p><strong>Package:</strong> \${vuln.PkgName} (\${vuln.InstalledVersion} â†’ \${vuln.FixedVersion})</p>
                <p><strong>Primary URL:</strong> <a href="\${vuln.PrimaryURL}" target="_blank">\${vuln.PrimaryURL}</a></p>
              </div>
              <div class="references">
                <strong>References:</strong>
                \${vuln.References.map(ref => \`<a href="\${ref}" target="_blank">\${ref}</a>\`).join('\n')}
              </div>
            </div>
            \`;
          });

          htmlContent += \`
          </body>
          </html>
          \`;

          // Write HTML content to a file
          fs.writeFileSync('trivy-report.html', htmlContent, 'utf8');

          console.log('HTML report generated successfully.');
          EOT
      - name: Convert Trivy Report to HTML
        run: node convert_trivy_report.js
      - name: Upload Trivy HTML Report
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: trivy-report.html
      - name: List directory contents for debugging
        run: ls -alh
      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/${{ github.repository_owner }}/examportal:${{ github.sha }}
